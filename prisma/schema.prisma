generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  relationMode = "prisma"
}

// NextAuth Adapter (@next-auth/prisma-adapter)
// https://next-auth.js.org/adapters/models

/// OAuth 계정 (NextAuth)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  // KakaoProvider 적용할 경우
  // Unknown arg `refresh_token_expires_in` in data.refresh_token_expires_in for type AccountUncheckedCreateInput.
  // 에러 해결
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  // Warning 해결을 위한 index
  // With `relationMode = "prisma"`, no foreign keys are used, so relation fields will not benefit from the index usually created by the relational database under the hood.
  @@index([userId])
}

/// 세션 (NextAuth)
/// 데이터베이스 세션을 위한 모델. JSON 웹 토큰이 활성화되어 있으면 사용되지 않음.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Warning 해결을 위한 index
  // With `relationMode = "prisma"`, no foreign keys are used, so relation fields will not benefit from the index usually created by the relational database under the hood.
  @@index([userId])
}

/// 유저 (NextAuth)
/// NextAuth으로 첫 로그인 후 자동으로 생성됨.
model User {
  /// 고유 번호
  id            String    @id @default(cuid())
  name          String?

  /// SNS 연동 외 유저를 위한 ID
  email         String?   @unique

  /// 이메일 인증된 시간
  emailVerified DateTime?
  
  /// 프로필 사진 URL
  /// Facebook 로그인시 이미지 URL이 길기 때문에 에러가 발생하여 임의로 길이를 늘림 (기본: varchar(191))
  image         String?   @db.Text

  accounts      Account[]
  
  sessions      Session[]

  /// SNS 연동 외 유저를 위한 비밀번호
  password      String?

  /// 전화번호 형식: 01012345678
  phoneNumber   String?

  /// 리뷰오더 머니
  money         Int @default(0)

  /// 관리하는 매장
  stores        Store[]

  // 내 주문 내역 기록 (Order)
  orders        Order[]

  // 내 리뷰 (Review)
  reviews Review[]
}

/// 확인 토큰 (NextAuth)
/// 비밀번호 없는 로그인을 위해 사용함. 한 유저가 여러 토큰을 가질 수 있음.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// 매장 모델
model Store {
  /// 고유 번호
  id Int @id @default(autoincrement())

  /// 매장 이름
  name String

  /// 매장 설명 (해시태그 포함)
  description String?

  /// 매장 주소
  address String?

  /// 매장 이미지
  image String?

  /// 매장 전화 번호
  phoneNumber String?

  /// 매장 관리 유저
  userId String

  // Error validating field `stores` in model `User`: The relation field `stores` on model `User` is missing an opposite relation field on the model `Store`. Either run `prisma format` or add it manually.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])

  /// 매장 내 메뉴
  menus Menu[]

  // 매장에서 판매된 주문내역들
  order Order[]

}

// 매장 메뉴
model Menu {
  /// 메뉴 고유번호
  id Int @id @default(autoincrement())

  /// 메뉴 이름
  name String

  /// 메뉴 설명
  description String?

  /// 메뉴 가격
  price Int @default(0)
  
  /// 메뉴 이미지
  image String?

  /// 메뉴 구매 가능 여부
  status MenuStatus @default(AVAILABLE)

  // 매장 FK키
  storeId Int
  store Store @relation(fields: [storeId], references: [id])

  /// index 추가 사유
  // Warning : With `relationMode = "prisma"`, no foreign keys are used, so relation fields will not benefit from the index usually created by the relational database under the hood. This can lead to poor performance when querying these fields. We recommend adding an index manually. 
  @@index([storeId])

  /// 장바구니로 추가된 각 메뉴들
  // 외래키 주려면 주는곳에서 이렇게 처리해야함 (FK는 OrderMenu에 있음)
  OrderMenus OrderMenu[]
}

/// AVAILABLE: 판매 가능
/// UNAVAILABLE: 판매 불가
enum MenuStatus {
  AVAILABLE
  UNAVAILABLE
}

/// Order (최종 주문 내역) 
// 거래 내역보면 결제자, 결제장소랑, 최종금액 표시 뜨는 것 나타냄 
model Order {
  // 주문 고유 번호
  id String @id @default(cuid())

  // 매장 FK키
  storeId Int
  store Store @relation(fields: [storeId], references: [id])
  @@index([storeId])

  // 유저 FK키
  userId String
  user User @relation(fields: [userId], references: [id])
  @@index([userId])
  
  // 총합 금액 (총 결제 금액)
  totalPrice Int @default(0)

  status OrderStatus @default(REQUESTED)

  /// 장바구니로 추가된 각 메뉴들 
  // 외래키 주려면 주는곳에서 이렇게 처리해야함 (FK는 OrderMenu에 있음)
  OrderMenus OrderMenu[]

  // 리뷰에 개시된 주문들
  reviews Review[]
}

enum OrderStatus {
  REQUESTED // 주문 요청
  CONFIRMED // 주문 확인
  COMPLETED // 주문 완료
  CANCELED // 주문 취소
}

// OrderMenu (장바구니)
model OrderMenu {
  // 장바구니 고유 번호
  id String @id @default(cuid())

  // Order FK키
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  @@index([orderId])

  // 메뉴 FK키
  menuId Int 
  menu Menu @relation(fields: [menuId], references: [id])
  @@index([menuId])

  // 주문 수량
  count Int @default(1)
}

model Review {
  // 리뷰 고유 번호
  id Int @id @default(autoincrement())

  // 유저 FK키
  userId String
  user User @relation(fields: [userId], references: [id])
  @@index([userId])

  // 주문내역 FK키
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  @@index([orderId])
  
  // 내용 (해시태그 등등)
  content String

  // 좋아요 수
  favorite Int @default(0)

  // 조회 수
  views  Int @default(0)
  
  // 리뷰 이미지
  image String?

  // 리뷰 별점 or 평점
  rating Int @db.TinyInt @default(0)

  // 리뷰 생성일자
  createTime DateTime @default(now())
}
