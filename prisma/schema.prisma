generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  relationMode = "prisma"
}

// NextAuth Adapter (@next-auth/prisma-adapter)
// https://next-auth.js.org/adapters/models

/// OAuth 계정 (NextAuth)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  // KakaoProvider 적용할 경우
  // Unknown arg `refresh_token_expires_in` in data.refresh_token_expires_in for type AccountUncheckedCreateInput.
  // 에러 해결
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  // Warning 해결을 위한 index
  // With `relationMode = "prisma"`, no foreign keys are used, so relation fields will not benefit from the index usually created by the relational database under the hood.
  @@index([userId])
}

/// 세션 (NextAuth)
/// 데이터베이스 세션을 위한 모델. JSON 웹 토큰이 활성화되어 있으면 사용되지 않음.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Warning 해결을 위한 index
  // With `relationMode = "prisma"`, no foreign keys are used, so relation fields will not benefit from the index usually created by the relational database under the hood.
  @@index([userId])
}

/// 유저 (NextAuth)
/// NextAuth으로 첫 로그인 후 자동으로 생성됨.
model User {
  /// 고유 번호
  id            String    @id @default(cuid())
  name          String?
  /// SNS 연동 외 유저를 위한 ID
  email         String?   @unique
  emailVerified DateTime?
  image         String? // 프로필 사진 
  accounts      Account[]
  sessions      Session[]

  /// SNS 연동 외 유저를 위한 비밀번호
  password      String?

  /// 전화번호 형식: 01012345678
  phoneNumber   String?

  /// 리뷰오더 머니
  money         Int @default(0)

  /// 관리하는 매장
  stores        Store[]
}

/// 확인 토큰 (NextAuth)
/// 비밀번호 없는 로그인을 위해 사용함. 한 유저가 여러 토큰을 가질 수 있음.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// 매장 모델
model Store {
  /// 고유 번호
  id Int @id @default(autoincrement())

  /// 매장 이름
  name String

  /// 매장 설명 (해시태그 포함)
  description String?

  /// 매장 주소
  address String?

  /// 매장 이미지
  image String?

  /// 매장 전화 번호
  phoneNumber String?

  /// 매장 관리 유저
  userId String

  // Error validating field `stores` in model `User`: The relation field `stores` on model `User` is missing an opposite relation field on the model `Store`. Either run `prisma format` or add it manually.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])

  /// 매장 내 메뉴
  menus Menu[]
}

// 매장 메뉴
model Menu {
  /// 메뉴 고유번호
  id Int @id @default(autoincrement())

  /// 메뉴 이름
  name String

  /// 메뉴 설명
  description String?

  /// 메뉴 가격
  price Int @default(0)
  
  /// 메뉴 이미지
  image String?

  /// 메뉴 구매 가능 여부
  status MenuStatus @default(AVAILABLE)

  storeId Int
  
  store Store @relation(fields: [storeId], references: [id])
}

/// AVAILABLE: 판매 가능
/// UNAVAILABLE: 판매 불가
enum MenuStatus {
  AVAILABLE
  UNAVAILABLE
}

model Order {
  // 주문 고유 번호
  id String @id @default(cuid())

  store Store

  user User
  
  totalPrice Int @default(0)

  status OrderStatus @default(REQUESTED)
}

enum OrderStatus {
  REQUESTED // 주문 요청
  CONFIRMED // 주문 확인
  COMPLETED // 주문 완료
  CANCELED // 주문 취소
}

model OrderMenu {
  id Int @id @default(autoincrement())
  orderId Int 
  menuId Int 
  count Int 
}

model Review {
  id Int @id @default(autoincrement())
  userId Int
  orderId Int
  tagId Int?
  title String
  content String?
  reviewImgUrl String? @default("default.jpg")
  snsOpt Int @db.TinyInt @default(0) // 개시여부 0- 안함, 1- 함
  rating Int @db.TinyInt @default(0)
  createTime DateTime @default(now())
  storeUrl String
  snsUrl String 
}
